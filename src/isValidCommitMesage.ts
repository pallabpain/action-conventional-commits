const DEFAULT_COMMIT_TYPES = [
    "feat",
    "fix",
    "docs",
    "style",
    "refactor",
    "test",
    "build",
    "perf",
    "ci",
    "chore",
    "revert",
    "merge",
    "wip",
    "release",
];

function parseEmojiTextIfPresent(message: string): string | null {
    const emojiRegex = /^:\w+: (.*)$/m;
    const match = message.match(emojiRegex);
    if (match && match.length >= 2) {
        return match[1].trim();
    }
    return null;
}

const isValidCommitMessage = (message, availableTypes = DEFAULT_COMMIT_TYPES): boolean => {
    // Exceptions.
    // This is a message that's auto-generated by git. Can't do much about it unfortunately. Let's allow it.
    if (message.startsWith("Merge ") || message.startsWith("Revert ")) {
        return true;
    }

    // It could be the case that you may end up with commits with emojis that
    // read like this :bug: fix(scope): message. We parse the commit message bit here.
    let parsedText = parseEmojiTextIfPresent(message);

    message = parsedText || message;

    // Commit message doesn't fall into the exceptions group. Let's do the validation.
    let [possiblyValidCommitType] = message.split(":");
    possiblyValidCommitType = possiblyValidCommitType.toLowerCase();

    // Let's remove scope if present.
    if (possiblyValidCommitType.match(/\(\S*?\)/)) {
        possiblyValidCommitType = possiblyValidCommitType.replace(/\(\S*?\)/, "");
    }

    possiblyValidCommitType = possiblyValidCommitType
        .replace(/\s/g, "") // Remove all whitespace
        .replace(/\!/g, "") // Remove bang for notify breaking change
        .replace(/()/g, "") // Remove all whitespace
        .replace(/[^a-z]/g, ""); // Only leave [a-z] characters.

    return availableTypes.includes(possiblyValidCommitType);
};

export default isValidCommitMessage;
